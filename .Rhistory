devtools::install_github("rstudio/blogdown")
library(blogdown)
blogdown::install_hugo()
blogdown::hugo_version()
q()
?'...'
x <- 10
source('~/.active-rstudio-document', echo=TRUE)
myfun <- function(...){
mylist <- list(...)
first <- mylist[1]
}
myfun(1,2)
y <- myfun(1,2)
y
y <- myfun(2,1)
y
myfun <- function(...){
mylist <- list(...)
first <- mylist[[1]]
}
y <- myfun(2,1)
y
?seq_along
?for
apropos(for)
seq_along(1:10)
myfun <- function(...){
mylist <- list(...)
# for (i in seq_along(length(mylist))){
#
# }
}
mylist <- myfun(c(1,2),1:5,"a","b")
str(mylist)
?mean
?data.frame
?apply
Rcpp::sourceCpp('Documents/Git_repos/test.cpp')
Rcpp::sourceCpp('Documents/Git_repos/test.cpp')
Rcpp::sourceCpp('Documents/Git_repos/test.cpp')
Rcpp::sourceCpp('Documents/Git_repos/test.cpp')
Rcpp::sourceCpp('Documents/Git_repos/test.cpp')
my_fun <- putFunPtrInXPtr()
library(inline)
library(Rcpp)
?Rcpp::sourceCpp
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
sourceCpp(code='
#include <Rcpp.h>
// [[Rcpp::export]]
int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}'
)
?fibonacci
fibonacci
mean
mean_x <- function(x){ return mean(x)}
mean_x <- function(x){ y <- mean(x)}
mean_x
body(mean_x)
body(fibonacci)
q()
q()
q()
# solve the gprotein system
library(deSolve)
library(ggplot2)
install.packages("desolve")
install.packages("deSolve")
q()
install.packages(c("Matrix", "mgcv"))
install.packages("deSolve")
install.packages("tidyverse")
library("ggplot2")
install.packages("microbenchmark")
# solve the gprotein system
library(deSolve)
library(ggplot2)
library(microbenchmark)
source('parameters_gprotein.R')
setwd("~/Google Drive/r_package_projects/probmodel/src/gprotein_norules")
source('parameters_gprotein.R')
p   <- parameters()
source('parameters_gprotein.R')
parameters
source('IC_gprotein.R')
IC  <- Initial_conditions()
IC
TIME = seq(from = 0, to = 600)
#### To use the R version of
source('odes_gprotein.R')
ODE_gprotein()
sim.data.df  <- as.data.frame(vode(IC,TIME,ODE_gprotein,p,
mf = 22, rtol=1e-3,atol=1e-6,maxord = 5,
verbose = F))
sim.data.df <- as.data.frame(vode(IC,TIME,odes_gprotein,p,
mf = 22, rtol = 1e-3, atol = 1e-6, maxord = 5,
verbose = F))
sim.data.df  <- as.data.frame(vode(IC,TIME,ODE_gprotein,p,
mf = 22, rtol=1e-3,atol=1e-6,maxord = 5,
verbose = F))
p   <- parameters()
source('IC_gprotein.R')
IC  <- Initial_conditions()
TIME = seq(from = 0, to = 600)
#### To use the R version of
source('odes_gprotein.R')
sim.data.df  <- as.data.frame(vode(IC,TIME,ODE_gprotein,p,
mf = 22, rtol=1e-3,atol=1e-6,maxord = 5,
verbose = F))
library("BH", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:BH", unload=TRUE)
#include <Rcpp.h>
using namespace Rcpp;
Rcpp::sourceCpp('~/Documents/Git_repos/test2.cpp')
Rcpp::sourceCpp('~/Documents/Git_repos/test2.cpp')
?Rcpp::Rcout
?Rcout
??Rcout
Rcpp::sourceCpp('~/Documents/Git_repos/test2.cpp')
timesTwo(3)
timesTwo
body(timesTwo)
q()
